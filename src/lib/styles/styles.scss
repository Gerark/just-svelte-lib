@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";

@mixin create-theme($theme,
    $surface, $onSurface,
    $primary, $onPrimary,
    $secondary, $onSecondary,
	$ternary, $onTernary,
	$success, $onSuccess,
	$warning, $onWarning,
	$error, $onError) {
  :is([data-just-theme=#{$theme}][data-just-theme-mode=light]) {
    @include setup-base-color-theme("surface", $surface, $onSurface, true);
    @include setup-base-color-theme("primary", $primary, $onPrimary, true);
    @include setup-base-color-theme("secondary", $secondary, $onSecondary, true);
    @include setup-base-color-theme("ternary", $ternary, $onTernary, true);
    @include setup-base-color-theme("success", $success, $onSuccess, true);
    @include setup-base-color-theme("warning", $warning, $onWarning, true);
    @include setup-base-color-theme("error", $error, $onError, true);
  }
  :is([data-just-theme=#{$theme}][data-just-theme-mode=dark]) {
    @include setup-base-color-theme("surface", $surface, $onSurface, false);
    @include setup-base-color-theme("primary", $primary, $onPrimary, false);
    @include setup-base-color-theme("secondary", $secondary, $onSecondary, false);
    @include setup-base-color-theme("ternary", $ternary, $onTernary, false);
    @include setup-base-color-theme("success", $success, $onSuccess, false);
    @include setup-base-color-theme("warning", $warning, $onWarning, false);
    @include setup-base-color-theme("error", $error, $onError, false);
  }
  :is([data-just-theme=#{$theme}]) {
    --tjust-bg-color: var(--tjust-surface-d4);
    --tjust-bg-component-color: var(--tjust-surface-d2);
    --tjust-bg-content-color: var(--tjust-surface-d3);
    --tjust-bg-highlighted-text-color: var(--tjust-ternary);
    --tjust-bg-selected-color: #{$primary};
    --tjust-bg-hover-color: var(--tjust-primary-d4);
    --tjust-bg-table-even: var(--tjust-surface-d2);
    --tjust-bg-table-odd: var(--tjust-surface-d3);
    --tjust-txt-default-color: var(--tjust-on-surface);
    --tjust-txt-inactive-color: #{color.adjust($onSurface, $alpha: -0.75)};
    --tjust-txt-selected-color: var(--tjust-on-primary);
    --tjust-txt-highlighted-color: var(--tjust-on-ternary);
    --tjust-sep-color: var(--tjust-surface);
    --tjust-scroll-color: var(--tjust-surface);
    --tjust-scroll-hover-color: var(--tjust-bg-hover-color);
    --tjust-border-default-color: var(--tjust-surface-l1);
    --tjust-border-hover-color: var(--tjust-primary);
    --tjust-border-focus-color: var(--tjust-primary);
    --tjust-border-active-color: var(--tjust-secondary);
    --tjust-bg-treeviewitem-color: transparent;
    --tjust-bg-treeviewitem-hover-color: var(--tjust-bg-hover-color);
    --tjust-bg-treeviewitem-focus-color: var(--tjust-primary);
    --tjust-bg-treeviewitem-focus-text-color: var(--tjust-on-primary);
    --tjust-bg-button-color: var(--tjust-primary);
    --tjust-bg-button-hover-color: var(--tjust-primary-l1);
    --tjust-txt-button-color: var(--tjust-on-primary);
    --tjust-icon-default-color: var(--tjust-on-surface);
    --tjust-icon-hover-color: var(--tjust-primary);
    --tjust-icon-treeviewitem-color: var(--tjust-primary-l3);
    --tjust-checkmark-default-color: var(--tjust-primary);
    --tjust-animation-click-duration: 0.15s;
    --tjust-animation-hover-duration: 0.25s;

    --tjust-font-family: 'Lucida Sans Unicode', serif;
    --tjust-font-size-2xs: 0.625rem;
    --tjust-font-size-xs: 0.75rem; // 12px
    --tjust-font-size-sm: 0.875rem; // 14px
    --tjust-font-size-md: 1rem; //usually 16px
    --tjust-font-size-lg: 1.125rem; // 18px
    --tjust-font-size-xl: 1.5rem; // 24px
    --tjust-font-size-2xl: 2.0rem;

    --tjust-gap-default: 5px;

    --tjust-padding-xs: calc(var(--tjust-font-size-xs) / 4);
    --tjust-padding-sm: calc(var(--tjust-font-size-sm) / 4);
    --tjust-padding-md: calc(var(--tjust-font-size-md) / 4);
    --tjust-padding-lg: calc(var(--tjust-font-size-lg) / 4);
    --tjust-padding-xl: calc(var(--tjust-font-size-xl) / 4);
    --tjust-padding-thick: var(--tjust-padding-sm);
    --tjust-padding-thin: var(--tjust-padding-xs);

    --tjust-border-width: 2px;
    --tjust-border-width-xs: 2px;
    --tjust-border-width-sm: 3px;
    --tjust-border-width-md: 4px;
    --tjust-border-width-lg: 5px;
    --tjust-border-width-xl: 5px;
    --tjust-border-radius: 10px;

    font-family: var(--tjust-font-family);
    font-size: 16px;
    color: var(--tjust-txt-default-color);

    .dragged-item {
      position: absolute;
      z-index: 9000;
      animation: top 0.125s;
    }

    // flex

    .flex-h {
      display: flex;
      flex-flow: row nowrap;
    }

    .flex-v {
      display: flex;
      flex-flow: column nowrap;
    }

    $sizes: ('3xs', '2xs', 'xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl');

    @include gaps($sizes, 'px', 1, 30, get-function(custom));
    @include gaps($sizes, 'px', 1, 30, get-function(custom));


    .panel {
      background: var(--tjust-surface-d3);
      border: var(--tjust-border-width-xs) solid var(--tjust-border-default-color);
      border-radius: var(--tjust-border-radius);
    }

    .panel-hover:hover {
      background: var(--tjust-bg-hover-color);
      border: var(--tjust-border-width-xs) solid var(--tjust-border-hover-color);
    }

    .panel-shadow {
      box-shadow: 0 0 10px black;
    }

    ::-webkit-scrollbar {
      width: 8px;
      border: 0 solid transparent;
      margin: 5px;
    }

    ::-webkit-scrollbar-track {
      border: 0 solid transparent;
      box-shadow: none;
    }

    ::-webkit-scrollbar-track:hover {
      border: 0 solid transparent;
      box-shadow: none;
    }

    ::-webkit-scrollbar-thumb {
      background-color: var(--tjust-scroll-color);
      border: 0 solid transparent;
      box-shadow: none;
    }

    ::-webkit-scrollbar-thumb:hover {
      background-color: var(--tjust-scroll-hover-color);
      border: 0 solid transparent;
      box-shadow: none;
    }

    .just-highlighted-text {
      background: var(--tjust-bg-highlighted-text-color);
      color: var(--tjust-txt-highlighted-color);
    }
  }
}

@mixin gap($tag, $val, $unit) {
  --tjust-gap-#{$tag}: #{$val}#{$unit};
  .gap-#{$tag} {
    gap: var(--tjust-gap-#{$tag});
  }
}

@mixin gaps($sizes, $unit, $start, $end, $stepFunction) {
  $size: list.length($sizes);
  @for $i from 0 through $size - 1 {
    $tag: list.nth($sizes, $i + 1);
    $val: interpolate($stepFunction, $start, $end, calc(($i) / ($size - 1)), $unit == "px");
    
    @include gap($tag, $val, $unit)
  }
}

@mixin setup-dark-color-theme($name, $color, $lightness, $useLightTheme) {
  @for $i from 4 through 1 {
    $var: calc(($i * 15 * $lightness) / 100);
    @if $useLightTheme {
      --tjust-#{$name}-l#{$i}: #{darken($color, $var)};
    } @else {
      $suffix: #{$name}-d#{$i};
      --tjust-#{$suffix}: #{darken($color, $var)};
      .tjust-bkg-#{$name}-d#{$i} {
        background: var(--tjust-#{$suffix});
      }
    }
  }
}

@mixin setup-light-color-theme($name, $color, $lightness, $useLightTheme) {
  @for $i from 1 through 4 {
    $var: calc(($i * 15 * $lightness) / 100);
    @if $useLightTheme {
      --tjust-#{$name}-d#{$i}: #{lighten($color, $var)};
    } @else {
      $suffix: #{$name}-d#{$i};
      --tjust-#{$name}-l#{$i}: #{lighten($color, $var)};
      .tjust-bkg-#{$name}-d#{$i} {
        background: var(--tjust-#{$suffix});
      }
    }
  }
}

@mixin setup-base-color-theme($name, $color, $onColor, $useLightTheme) {
  $lightness: color.lightness($color);
  @include setup-dark-color-theme($name, $color, $lightness, $useLightTheme);
  --tjust-#{$name}: #{$color};
  .tjust-bkg-#{$name} {
    background: var(--tjust-#{name});
  }
  @include setup-light-color-theme($name, $color, $lightness, $useLightTheme);
  --tjust-on-#{$name}: #{$onColor};
}

@function interpolate($easeFunction, $start, $end, $val, $round) {
  $result: ($start + (($end - $start) * call($easeFunction, $val)));
  $result: math.round($result);
  @return $result;
}

@function linear($val) {
  @return $val;
}

@function easeInOutQuad($val) {
  @if $val < 0.5 {
    @return 2 * $val * $val;
  }

  $temp: math.pow((-2 * $val) + 2, 2);
  @return 1 - calc($temp / 2);
}

@function custom($val) {
  $exp: 0.5;
  @if $val <= 0.5 {
    $v: math.pow($val * 2, $exp);
    @return calc($v / 2);
  }

  $v: math.pow(2 - $val * 2, $exp);
  @return 1 - calc($v / 2);
}